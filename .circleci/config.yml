# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      # Set image for Java JDK 11.0 
      - image: circleci/openjdk:11.0.3-jdk-stretch
      #specify system properties
      environment:
        DB_ROOT_USER: root
        DB_URL: jdbc:mysql://localhost:3306/testdb
        DB_DRIVER: com.mysql.cj.jdbc.Driver
        DB_PASS: secret
      # Set image for MYSQl
      - image: circleci/mysql:5.7
      environment:
        MYSQL_ROOT_PASSWORD: secret
       
      
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Build
          command: mvn -B -DskipTests clean package
      - run:
        name: Wait for Database Connection
        # preinstalled in circleci/* docker image
        command: dockerize -wait tcp://localhost:3306 -timeout 1m
      #install mysql client
      - run: sudo apt-get install mysql-client
      # create databases
      - run: mysql -h 127.0.0.1 -u root -e "create database prueba_tbl"
      # Download and cache dependencies
      - restore_cache:
        keys:
        -  v1-dependencies-{{ checksum "pom.xml" }}
        # fallback to using the latest cache if no exact match is found
        -  v1-dependencies-
      - run: mvn dependency:go-offline
      - save_cache:
        paths:
        - ~/.m2
        key: v1-dependencies-{{ checksum "pom.xml" }}
      # Then run your tests!
      - run:
          name: Test
          command: mvn test

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test